#include "services_microboone_basic.fcl"
#include "GenieOutput.fcl"

process_name: MoreGenie

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "addgenie_hist.root" closeFileFast: false }
  TimeTracker: {}
  MemoryTracker: {}
  RandomNumberGenerator: {} # ART native random number generator
  NuRandomService: @local::microboone_seedservice
  @table::microboone_basic_services
}

# Edit here to generate in a different detector. See Geometry.fcl
# If this is changed be sure to change the GENIE flux (below) to match
# services.Geometry: @local::nd_geo

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  firstRun:    1000001     # Run number to use for this file
  firstSubRun: 1           # Subrun number to use for this file
  firstEvent:  1           # number of first event in the file
  maxEvents:   10          # Override on the command line with lar -n
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
  {
    generator: {

       module_type: AddGenieEventsToArtUB # Name of module
       fileList: [ "*.ghep.root" ] # Name(s) of files containing GHEP events
       countConfig: "fixed: 1 " # how many GHEP events to add per art event
                                #    "fixed:      <N>"
                                #    "flat:       <Nmin> <Nmax>"
                                #    "poisson:    <Nmean>"
                                #    "poisson-1:  <Nmean>"
                                #    "gauss:      <mean> <rms>"

       addMCFlux: false  # Store associated MCFlux object (if there is one)
                         # Events generated with gevgen don't have flux info

       outputPrintLevel:  -1 # dump events to output (file) 
                             # as they're read in
                             # use -1 to suppress, 13 = full
       outputDumpFileName: "AddGenieEvents_%l.txt" # name of file to dump to
                                                   # %l substitutes module label name
 
       # Settings specific to ActiveVolumeVertexSampler
       vertex: {
         type: "sampled"
         time_type: "uniform"
         # Time offsets for BNB spill (needed for MicroBooNE)
         T0: 3925.0
         SigmaT: 800.
       }

       # seed: 1234 # Optional random number seed
    }
  }

  analyzers:
  {
    outputgenie:  @local::standard_genie_output
  }

  simulate: [ generator ]

  stream1:  [ outputgenie, out1 ]

  trigger_paths:   [ simulate ]
  end_paths:       [ stream1 ]

}

outputs:
{
  out1:
  {
    module_type:  RootOutput
    fileName:     "addgenie.root"  # default name, override w/ -o --output
    SelectEvents: [ simulate ]
  }
}

physics.analyzers.outputgenie.dumpFilePattern: "cout"
physics.analyzers.outputgenie.dumpMCTruth: true
physics.analyzers.outputgenie.dumpGTruth:  true
physics.analyzers.outputgenie.dumpMCFlux:  true
